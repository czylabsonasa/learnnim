digraph G { 
  nim 
    [shape = circle, URL = "https://nim-lang.org"] ;
  
  system, strutils, 
  sequtils, sugar, 
  algorithm, sets, tables, 
  math, strscans, os, monotimes
    [style = filled, color = "0.7 0.3 1.0"] ;
  
  monotimes [label="std/monotimes"]


  nim0 [ label = 
    "int,float,char
    array,seq
    var,let,const
    proc
    case-of-else", 
  shape = box ]
  nim0 -> nim ;
  
/* ************ */
  system -> nim [style = dotted] ;
  system0 [ label = 
    "$,&
    add,in,contains
    stdin, readLine, readAll
    typeof,sizeof", 
  shape = box] ;
  system0 -> system ;

/* ************ */
  strutils -> nim;
  strutils0[ label = 
    "join,split,strip
    repeat", 
  shape = box] ;
  strutils0 -> strutils ;

/* ************ */

  sequtils -> nim;
  sequtils0[ label = 
    "map, filter
    repeat", 
  shape = box] ; 
  sequtils0 -> sequtils;

/* ************ */
  sugar -> nim;
  sugar0[ label = 
    "=>", 
  shape = box ] ; 
  sugar0 -> sugar;

/* ************ */

  algorithm -> nim;
  algorithm0[label = 
    "sort, sorted
    nextPermutation,
    fill", 
  shape = box ]
  algorithm0 -> algorithm    

/* ************ */

  sets -> nim;
  sets0[ label = 
    "HashSet[T], init", 
  shape = box ] ; 
  sets0 -> sets;


/* ************ */
  tables -> nim;
  tables0[ label = 
    "Table[K,V], toTable, hash", 
  shape = box ] ; 
  tables0 -> tables;


/* ************ */

  math -> nim;
  math0[ label = 
    "pow,^
    log2,ln,E
    sum
    binom", 
  shape = box ] ; 
  math0 -> math ;

/* ************ */

  strscans -> nim;
  strscans0[ label = 
    "scanf", 
  shape = box ]
  strscans0 -> strscans ;

/* ************ */

  os -> nim;
  os0[ label = 
    "sleep", 
  shape = box ]
  os0 -> os ;

/* ************ */

  monotimes -> nim;
  monotimes0[ label = 
    "getMonoTime, ticks", 
  shape = box ]
  monotimes0 -> monotimes ;

}
